// Підключення необхідних модулів
const { Command } = require('commander'); // Сторонній модуль для роботи з командним рядком
const fs = require('fs'); // Вбудований модуль Node.js для роботи з файловою системою

/**
 * Лабораторна робота №3: Аналізатор даних польотів
 * Варіант 2: flights-1m.json
 * Автор: Marta Stakhurska
 * Дата: 30 вересня 2025
 * 
 * Програма аналізує дані польотів з JSONL файлу та виводить інформацію
 * про час у повітрі та відстань з можливістю фільтрації та форматування
 */

// Створення нового об'єкта Command для налаштування CLI інтерфейсу
const program = new Command();

// Налаштування командного рядка з використанням Commander.js
program
  .name('flights-analyzer') // Назва програми для відображення в --help
  .description('Аналізатор даних польотів') // Опис програми
  .version('1.0.0') // Версія програми (показується при --version)
  
  // Обов'язковий параметр: шлях до вхідного файлу
  .requiredOption('-i, --input <path>', 'шлях до файлу для читання (обов\'язковий)')
  
  // Необов'язковий параметр: шлях до файлу для збереження результатів
  .option('-o, --output <path>', 'шлях до файлу для запису результату')
  
  // Прапорець: чи виводити результат у консоль
  .option('-d, --display', 'вивести результат у консоль')
  
  // Прапорець: чи показувати дату перед кожним записом (специфічно для варіанту 2)
  .option('--date', 'відображати дату перед інформацією про відстань та час у повітрі')
  
  // Параметр з значенням: фільтрація за мінімальним часом у повітрі (специфічно для варіанту 2)
  // parseInt - функція для перетворення рядка у число
  .option('-a, --airtime <minutes>', 'відображати лише записи з часом у повітрі довшим за заданий (у хвилинах)', parseInt);

// Парсинг аргументів командного рядка
// process.argv містить аргументи, передані при запуску програми
program.parse();

// Отримання об'єкта з усіма опціями, які ввів користувач
const options = program.opts();

// === ВАЛІДАЦІЯ ВХІДНИХ ДАНИХ ===

// Перевірка наявності обов'язкового параметра -i (--input)
// Хоча Commander.js також перевіряє requiredOption, додаткова перевірка для надійності
if (!options.input) {
  console.error('Please, specify input file'); // Точний текст помилки згідно з завданням
  process.exit(1); // Завершення програми з кодом помилки 1
}

// Перевірка існування файлу за вказаним шляхом
// fs.existsSync() синхронно перевіряє чи існує файл/папка
if (!fs.existsSync(options.input)) {
  console.error('Cannot find input file'); // Точний текст помилки згідно з завданням
  process.exit(1); // Завершення програми з кодом помилки 1
}

// === ОСНОВНА ЛОГІКА ОБРОБКИ ФАЙЛУ ===

try {
  // Синхронне читання файлу у форматі UTF-8
  // readFileSync блокує виконання програми до завершення читання
  const fileContent = fs.readFileSync(options.input, 'utf8');
  
  // Розбиття вмісту файлу на окремі рядки
  // trim() видаляє пробіли на початку і в кінці
  // split('\n') ділить рядок по символу нового рядка
  const lines = fileContent.trim().split('\n');
  
  // Масив для зберігання оброблених результатів
  let results = [];
  
  // === ОБРОБКА КОЖНОГО ЗАПИСУ ===
  
  // Ітерація по кожному рядку файлу
  lines.forEach(line => {
    // Пропуск порожніх рядків (після trim() довжина = 0)
    if (!line.trim()) return;
    
    // Парсинг JSON з поточного рядка
    // Кожен рядок містить окремий JSON об'єкт (JSONL формат)
    const flight = JSON.parse(line);
    
    // === ФІЛЬТРАЦІЯ ДАНИХ (згідно з варіантом 2) ===
    
    // Якщо користувач вказав мінімальний час у повітрі (-a параметр)
    // та поточний рейс має час <= заданого, пропускаємо його
    if (options.airtime && flight.AIR_TIME <= options.airtime) {
      return; // return у forEach пропускає поточну ітерацію
    }
    
    // === ФОРМАТУВАННЯ ВИВОДУ ===
    
    // Змінна для формування рядка виводу
    let outputLine = '';
    
    // Якщо вказано параметр --date, додаємо дату на початок рядка
    // Перевіряємо також наявність поля FL_DATE у даних
    if (options.date && flight.FL_DATE) {
      outputLine += flight.FL_DATE + ' '; // Додаємо дату та пробіл
    }
    
    // Отримання значень часу у повітрі та відстані
    // Використовуємо оператор || для значення за замовчуванням
    const airTime = flight.AIR_TIME || 'N/A'; // Час у повітрі в хвилинах
    const distance = flight.DISTANCE || 'N/A'; // Відстань у милях
    
    // Формування фінального рядка: "час відстань" або "дата час відстань"
    outputLine += airTime + ' ' + distance;
    
    // Додавання сформованого рядка до масиву результатів
    results.push(outputLine);
  });
  
  // === ФОРМУВАННЯ ФІНАЛЬНОГО ВИВОДУ ===
  
  // Об'єднання всіх рядків результатів у один текст
  // join('\n') вставляє символ нового рядка між елементами масиву
  const output = results.join('\n');
  
  // === ВИВІД РЕЗУЛЬТАТІВ ===
  
  // Якщо користувач вказав параметр -d (--display), виводимо у консоль
  if (options.display) {
    console.log(output); // Вивід всього тексту у стандартний потік виводу
  }
  
  // Якщо користувач вказав параметр -o (--output), записуємо у файл
  if (options.output) {
    // Синхронний запис у файл з кодуванням UTF-8
    // Якщо файл не існує, він буде створений
    // Якщо файл існує, його вміст буде перезаписаний
    fs.writeFileSync(options.output, output, 'utf8');
  }
  
  // Якщо користувач не вказав ні -d, ні -o, програма нічого не виводить
  // Це відповідає вимогам завдання: "Якщо ніякий з необов'язкових параметрів не задано - 
  // програма не має виводити нічого"

// === ОБРОБКА ПОМИЛОК ===

} catch (error) {
  // Перехоплення будь-яких помилок, що можуть виникнути:
  // - Помилки читання файлу (файл заблокований, немає прав доступу тощо)
  // - Помилки парсингу JSON (некоректний формат JSON у файлі)
  // - Помилки запису файлу (немає місця на диску, немає прав запису тощо)
  
  console.error('Помилка при обробці файлу:', error.message);
  process.exit(1); // Завершення програми з кодом помилки 1
}

/**
 * === ПОВНИЙ СПИСОК КОМАНД ДЛЯ ЛАБОРАТОРНОЇ РОБОТИ ===
 * 
 * 1. БАЗОВИЙ СИНТАКСИС:
 *    node main.js -i <файл> [опції]
 * 
 * 2. ОБОВ'ЯЗКОВІ ПАРАМЕТРИ:
 *    -i, --input <path>  - Шлях до JSON файлу з даними польотів
 * 
 * 3. НЕОБОВ'ЯЗКОВІ ПАРАМЕТРИ:
 *    -o, --output <path> - Записати результат у вказаний файл
 *    -d, --display       - Показати результат у консолі
 *    --date              - Додати дату перед кожним записом
 *    -a, --airtime <min> - Показати лише рейси з часом > вказаних хвилин
 * 
 * 4. СЛУЖБОВІ КОМАНДИ:
 *    --help              - Показати довідку
 *    --version           - Показати версію програми
 * 
 * 5. ПРИКЛАДИ ВИКОРИСТАННЯ:
 * 
 *    // Показати довідку
 *    node main.js --help
 * 
 *    // Базове використання (вивід у консоль)
 *    node main.js -i flights-1m.json -d
 * 
 *    // З відображенням дати
 *    node main.js -i flights-1m.json -d --date
 * 
 *    // Фільтрація за часом у повітрі (більше 350 хвилин)
 *    node main.js -i flights-1m.json -d -a 350
 * 
 *    // Запис результату у файл
 *    node main.js -i flights-1m.json -o results.txt
 * 
 *    // Запис у файл з датою та фільтрацією
 *    node main.js -i flights-1m.json -o results.txt --date -a 300
 * 
 *    // Одночасно у консоль і файл
 *    node main.js -i flights-1m.json -d -o results.txt
 * 
 *    // Комбінація всіх параметрів
 *    node main.js -i flights-1m.json -d -o results.txt --date -a 340
 * 
 * 6. ФОРМАТ ВИВОДУ:
 *    Без --date: "350 2475"
 *    З --date:   "2006-01-01 350 2475"
 *    Де: 350 = час у повітрі (хвилини), 2475 = відстань (милі)
 * 
 * 7. ПОМИЛКИ ТА ЇХ ЗНАЧЕННЯ:
 *    "error: required option '-i, --input <path>' not specified"
 *    → Не вказано обов'язковий параметр -i
 * 
 *    "Cannot find input file"
 *    → Файл за вказаним шляхом не існує
 * 
 *    "Помилка при обробці файлу: [деталі]"
 *    → Помилка читання файлу або некоректний JSON формат
 * 
 * 8. ПІДГОТОВКА ДО РОБОТИ:
 *    npm install           - Встановити залежності
 *    node main.js --help   - Перевірити доступні команди
 * 
 * 9. СТРУКТУРА JSON ФАЙЛУ (JSONL формат):
 *    Кожен рядок файлу містить окремий JSON об'єкт:
 *    {"FL_DATE":"2006-01-01","AIR_TIME":350,"DISTANCE":2475,...}
 *    {"FL_DATE":"2006-01-02","AIR_TIME":343,"DISTANCE":2475,...}
 * 
 * 10. ВАЖЛИВІ ПОЛЯ JSON:
 *     FL_DATE   - Дата польоту (використовується з --date)
 *     AIR_TIME  - Час у повітрі в хвилинах (для фільтрації -a)
 *     DISTANCE  - Відстань у милях (завжди виводиться)
 * 
 * 11. ЩО ОЗНАЧАЮТЬ СИМВОЛИ "-" ТА "--":
 * 
 *     ОДИН ДЕФІС (-):
 *     - Короткі опції (зазвичай одна літера)
 *     - Приклад: -i, -d, -o, -a
 *     - Можна об'єднувати: -do замість -d -o
 * 
 *     ДВА ДЕФІСИ (--):
 *     - Довгі опції (повні слова)
 *     - Приклад: --input, --display, --output, --date
 *     - Більш описові та зрозумілі
 * 
 *     ЕКВІВАЛЕНТНІСТЬ:
 *     -i  = --input     (шлях до файлу)
 *     -d  = --display   (показати у консолі)
 *     -o  = --output    (записати у файл)
 *     -a  = --airtime   (фільтр за часом)
 *         = --date      (тільки довга форма)
 *     -h  = --help      (довідка)
 *     -V  = --version   (версія)
 * 
 *     ПРИКЛАДИ ВИКОРИСТАННЯ:
 *     node main.js -i data.json -d        ← короткі форми
 *     node main.js --input data.json --display  ← довгі форми
 *     node main.js -i data.json --date    ← змішані форми
 * 
 *     ОСОБЛИВОСТІ:
 *     - Короткі можна писати разом: -ido file.txt output.txt
 *     - Довгі завжди окремо: --input --display --output
 *     - З значеннями: -i file.json або --input=file.json
 *     - Без значень (прапорці): -d або --display
 */

